[[metric]]
context = "sessions"
labels = ["status", "type"]
cloudwatchtype = { value = "Count" }
metricsdesc = { value = "Gauge metric with count of sessions by status and type." }
request = "SELECT status, type, COUNT(*) as value FROM v$session GROUP BY status, type"

[[metric]]
context = "resource"
labels = ["resource_name"]
metricsdesc = { current_utilization = "Generic counter metric from v$resource_limit view in Oracle (current value).", limit_value = "Generic counter metric from v$resource_limit view in Oracle (UNLIMITED: -1)." }
cloudwatchtype = { current_utilization = "Count", limit_value = "Count" }
request = "SELECT resource_name,current_utilization,CASE WHEN TRIM(limit_value) LIKE 'UNLIMITED' THEN '-1' ELSE TRIM(limit_value) END as limit_value FROM v$resource_limit"

[[metric]]
context = "asm_diskgroup"
labels = ["name"]
metricsdesc = { total = "Total size of ASM disk group.", free = "Free space available on ASM disk group." }
request = "SELECT name,total_mb*1024*1024 as total,free_mb*1024*1024 as free FROM v$asm_diskgroup_stat where exists (select 1 from v$datafile where name like '+%')"
cloudwatchtype = { total = "Bytes", free = "Bytes" }
ignorezeroresult = true

[[metric]]
context = "activity"
metricsdesc = { value = "Generic counter metric from v$sysstat view in Oracle." }
fieldtoappend = "name"
cloudwatchtype = { value = "Count" }
request = "SELECT name, value FROM v$sysstat WHERE name IN ('parse count (total)', 'execute count', 'user commits', 'user rollbacks')"

[[metric]]
context = "process"
metricsdesc = { count = "Gauge metric with count of processes." }
cloudwatchtype = { count = "Count" }
request = "SELECT COUNT(*) as count FROM v$process"

[[metric]]
context = "wait_time"
metricsdesc = { value = "Generic counter metric from v$waitclassmetric view in Oracle." }
fieldtoappend = "wait_class"
cloudwatchtype = { value = "Seconds" }
request = '''
SELECT
  n.wait_class as WAIT_CLASS,
  round(m.time_waited/m.INTSIZE_CSEC,3) as VALUE
FROM
  v$waitclassmetric  m, v$system_wait_class n
WHERE
  m.wait_class_id=n.wait_class_id AND n.wait_class != 'Idle'
'''

[[metric]]
context = "tablespace"
labels = ["tablespace", "type"]
metricsdesc = { bytes = "Generic counter metric of tablespaces bytes in Oracle.", max_bytes = "Generic counter metric of tablespaces max bytes in Oracle.", free = "Generic counter metric of tablespaces free bytes in Oracle.", used_percent = "Gauge metric showing as a percentage of how much of the tablespace has been used." }
cloudwatchtype = { bytes = "Bytes", max_bytes = "Bytes", free = "Bytes", used_percent = "Percent" }
request = '''
SELECT
    dt.tablespace_name as tablespace,
    dt.contents as type,
    dt.block_size * dtum.used_space as bytes,
    dt.block_size * dtum.tablespace_size as max_bytes,
    dt.block_size * (dtum.tablespace_size - dtum.used_space) as free,
    dtum.used_percent
FROM  dba_tablespace_usage_metrics dtum, dba_tablespaces dt
WHERE dtum.tablespace_name = dt.tablespace_name
ORDER by tablespace
'''

[[metric]]
context = "cache_hit_ratio"
metricsdesc = { percentage = "Gauge metric with the cache hit ratio." }
cloudwatchtype = { percentage = "Percent" }
request = "select Round(((Sum(Decode(a.name, 'consistent gets', a.value, 0)) + Sum(Decode(a.name, 'db block gets', a.value, 0)) - Sum(Decode(a.name, 'physical reads', a.value, 0))  )/ (Sum(Decode(a.name, 'consistent gets', a.value, 0)) + Sum(Decode(a.name, 'db block gets', a.value, 0)))) *100,2) as percentage FROM v$sysstat a"

[[metric]]
context = "startup"
metricsdesc = { time_seconds = "Database startup time in seconds." }
cloudwatchtype = { time_seconds = "Seconds" }
request = "SELECT (SYSDATE - STARTUP_TIME) * 24 * 60 * 60 AS time_seconds FROM V$INSTANCE"

[[metric]]
context = "blocking"
metricsdesc = { count = "Database blocking cound." }
cloudwatchtype = { count = "Count" }
request = "SELECT count(1) AS count FROM v$session s WHERE s.blocking_session IS NOT NULL AND s.seconds_in_wait > 600"

[[metric]]
context = "recovery"
metricsdesc = { file_dest_perc_used = "Recovery file percentage used." }
cloudwatchtype = { file_dest_percent_used = "Percent" }
request = "SELECT Round(Sum(PERCENT_SPACE_USED)) AS file_dest_perc_used FROM v$flash_recovery_area_usage WHERE file_type NOT IN ('FLASHBACK LOG')"

[[metric]]
context = "tcp_socket_kags"
metricsdesc = { wait_count = "tcp kags count." }
cloudwatchtype = { wait_count = "Count" }
request = "SELECT count(1) as wait_count FROM gv$session WHERE type <> 'BACKGROUND' AND event = 'TCP Socket (KGAS)'"

[[metric]]
context = "sessions_utilization"
metricsdesc = { utilization_percentage = "Recovery file percentage used." }
cloudwatchtype = { utilization_percentage = "Percent" }
request = "SELECT current_utilization as sess_count, max_utilization as sess_hw_mark, limit_value as sess_limit, ROUND((current_utilization / limit_value) * 100, 2) as util_percentage FROMv$resource_limit WHERE resource_name = 'sessions'"
